modular programming - splits the program into multiple components that have a specific functionality

example of modular programming:
* each component doing a particular task is put into different functions
* in this example, code that does email address checks are kept only in the "checkEmail()" function
but code that does password checks are kept only in the "checkPassword()" function 


example:
-------------------------------------------------------------------------------------------------------------
function checkEmail($database, $email) {
    $message = "";

    // Check if the email address field is not blank
    if($email == "") {
        $message = "Email address shouldn't be empty";
        return $message;
    }

    $emailPattern = "/[a-zA-Z0-9]+[^@]+@[a-zA-Z0-9]+[^@]+\.[a-zA-Z0-9]+[^@]+/";

    if(!preg_match($emailPattern, $email)) { // Check if the email address matches the specified pattern
        $message = "Email address is not valid. Please enter a valid one.";
        return $message;
    }

    return true;
}

-------------------------------------------------------------------------------------------------------------

function checkPassword($password, $confirmPassword) {
    $message = "";
    // Check if both fields are not blank
    if($password == "" and $confirmPassword == "") {
        $message = "Password fields shouldn't be empty";
        return $message;
    }

    // Check if both passwords match
    if($password != $confirmPassword) {
        $message = "Passwords do not match. Please try again.";
        return $message;
    }

    // Check if the password is at least 11 characters long.
    if(strlen($password) < 11) {
        $message = "Password is too short. Required character count: 11.";
        return $message;
    }

    return true;
}

-------------------------------------------------------------------------------------------------------------


advantages of modular programming:
* easier to read, test and debug
    - without modularity, functionality of different components are going to be mixed up together. 
    - if only one component needs to be tested, programmers will have to manually read and select code that only 
    needs to be tested, which can take more time

* less repetition, so easier to change
    - programmers only have to deal with one part of the source code. modularity makes sure that each part of the 
    program's logic is only kept in one place
    - if the code is not modular, you'll have more repeated code. if you want to change something in the repeated code, 
    then you will have to do that across multiple files with that code.